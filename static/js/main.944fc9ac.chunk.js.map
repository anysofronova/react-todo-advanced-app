{"version":3,"sources":["components/ItemAddForm/ItemAddForm.module.scss","components/SearchPanel/SearchPanel.module.scss","components/SearchPanel/ItemStatusFilter/ItemStatusFilter.module.scss","components/TodoList/TodoList.module.scss","components/App/App.module.scss","components/Header/Header.module.scss","store/taskSlice.ts","store/store.ts","hooks/redux.ts","components/Header/Header.tsx","components/ItemAddForm/ItemAddForm.tsx","components/SearchPanel/ItemStatusFilter/ItemStatusFilter.tsx","components/SearchPanel/SearchPanel.tsx","components/TodoList/TodoListItem/TodoListItem.tsx","components/TodoList/TodoList.tsx","components/App/App.tsx","index.tsx","components/TodoList/TodoListItem/TodoListItem.module.scss"],"names":["module","exports","taskSlice","createSlice","name","initialState","taskList","searchList","term","filter","doneCount","todoCount","reducers","addTask","state","action","payload","label","length","push","caseReducers","countingTasks","setSearchList","deleteTask","i","id","toggleTaskOption","map","option","sortTasks","setSearchOption","value","search","toLowerCase","indexOf","done","sort","a","b","Number","important","actions","store","configureStore","reducer","useAppDispatch","useDispatch","useAppSelector","useSelector","Header","toDo","className","style","appHeader","ItemAddForm","useState","task","setTask","dispatch","onSubmit","e","preventDefault","uuidv4","onAddTask","cn","form","type","input","placeholder","onChange","currentTarget","onClick","btn","ItemStatusFilter","btnGroup","checked","onFilterTask","outerText","SearchPanel","searchText","setSearchText","searchPanel","onChangeSearchText","TodoListItem","TodoList","todoData","listItem","App","app","ReactDOM","createRoot","document","getElementById","render"],"mappings":"4HACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,IAAM,2B,mBCA5FD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,6B,mBCAzED,EAAOC,QAAU,CAAC,SAAW,mCAAmC,QAAU,oC,mBCA1ED,EAAOC,QAAU,CAAC,SAAW,2BAA2B,SAAW,6B,mBCAnED,EAAOC,QAAU,CAAC,IAAM,mB,mBCAxBD,EAAOC,QAAU,CAAC,UAAY,4B,uHCajBC,EAAYC,YAAY,CACnCC,KAAM,OACNC,aAX+B,CAC/BC,SAAU,GACVC,WAAY,GACZC,KAAM,GACNC,OAAQ,MACRC,UAAW,EACXC,UAAW,GAMXC,SAAU,CACRC,QAAS,SAACC,EAAOC,GACfA,EAAOC,QAAQC,MAAMC,OAAS,GAC5BJ,EAAMR,SAASa,KAAf,eAAyBJ,EAAOC,UAClCd,EAAUkB,aAAaC,cAAcP,GACrCZ,EAAUkB,aAAaE,cAAcR,IAEvCS,WAAY,SAACT,EAAOC,GAClBD,EAAMR,SAAWQ,EAAMR,SAASG,QAAO,SAACe,GAAD,OAAOA,EAAEC,KAAOV,EAAOC,WAC9Dd,EAAUkB,aAAaC,cAAcP,GACrCZ,EAAUkB,aAAaE,cAAcR,IAEvCY,iBAAkB,SAChBZ,EACAC,GAEAD,EAAMR,SAAWQ,EAAMR,SAASqB,KAAI,SAACH,GACnC,OAAOA,EAAEC,KAAOV,EAAOC,QAAQS,GAAxB,2BACED,GADF,kBACMT,EAAOC,QAAQY,QAAUJ,EAAET,EAAOC,QAAQY,UADhD,eAEEJ,MAEXtB,EAAUkB,aAAaS,UAAUf,GACjCZ,EAAUkB,aAAaC,cAAcP,GACrCZ,EAAUkB,aAAaE,cAAcR,IAEvCgB,gBAAiB,SACfhB,EACAC,GAEAD,EAAMC,EAAOC,QAAQY,QAAUb,EAAOC,QAAQe,MAC9C7B,EAAUkB,aAAaE,cAAcR,IAGvCQ,cAAe,SAACR,GACdA,EAAMP,WAAaO,EAAMR,SAASG,QAAO,SAACe,GACxC,IAAMQ,EACJR,EAAEP,MAAMgB,cAAcC,QAAQpB,EAAMN,KAAKyB,gBAAkB,EACvDL,EACa,WAAjBd,EAAML,QACS,IAAXe,EAAEW,KACe,SAAjBrB,EAAML,SACK,IAAXe,EAAEW,KAER,OAAOH,GAAUJ,MAGrBC,UAAW,SAACf,GACVA,EAAMR,SAAWQ,EAAMR,SAAS8B,MAC9B,SAACC,EAAGC,GAAJ,OAAUC,OAAOD,EAAEE,WAAaD,OAAOF,EAAEG,eAG7CnB,cAAe,SAACP,GACdA,EAAMJ,UAAYI,EAAMR,SAASG,QAAO,SAACe,GAAD,OAAOA,EAAEW,QAAMjB,OACvDJ,EAAMH,UAAYG,EAAMR,SAASY,WAKhC,EACLhB,EAAUuC,QADG5B,EAAR,EAAQA,QAASU,EAAjB,EAAiBA,WAAYG,EAA7B,EAA6BA,iBAAkBI,EAA/C,EAA+CA,gBAEvC5B,IAAf,QCnEewC,EARDC,YAAe,CAC3BC,QAAS,CACP1C,e,kCCAS2C,EAAoCC,IACpCC,EAAkDC,I,OCahDC,EAbI,WACjB,IAAMd,EAAOY,GAAe,SAACjC,GAAD,OAAWA,EAAMZ,UAAUQ,aACjDwC,EAAOH,GAAe,SAACjC,GAAD,OAAWA,EAAMZ,UAAUS,aACvD,OACE,sBAAKwC,UAAWC,IAAMC,UAAtB,UACE,iDACA,+BACGH,EADH,gBACsBf,EADtB,e,8DCmCSmB,EArCS,WACtB,MAAwBC,mBAAiB,IAAzC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAWb,IAgBjB,OACE,uBAAMc,SAAU,SAACC,GAAD,OAhBA,SAACA,GACjBA,EAAEC,iBACFH,EACE7C,EAAQ,CACNI,MAAOuC,EACP/B,GAAIqC,cACJ3B,MAAM,EACNK,WAAW,KAGfiB,EAAQ,IAMeM,CAAUH,IAAIT,UAAWa,IAAGZ,IAAMa,MAAzD,UACE,kCACE,cAAC,IAAD,IACA,uBACEC,KAAK,OACLf,UAAWC,IAAMe,MACjBC,YAAa,WACbrC,MAAOyB,EACPa,SAAU,SAACT,GAAD,OAAOH,EAAQG,EAAEU,cAAcvC,UAE3C,cAAC,IAAD,CAAgBwC,QAAS,WAb7Bd,EAAQ,UAgBN,wBAAQN,UAAWa,IAAGZ,IAAMoB,IAAK,OAAjC,qB,kCCZSC,EAtBc,WAC3B,IAAM7C,EAASmB,GAAe,SAACjC,GAAD,OAAWA,EAAMZ,UAAUO,UACnDiD,EAAWb,IAIjB,OACE,qBAAKM,UAAWC,IAAMsB,SAAtB,SAFc,CAAC,MAAO,SAAU,QAGrB/C,KAAI,SAACH,GAAD,OACX,wBAEE0C,KAAK,SACLf,UAAWa,IAAG,MAAOpC,IAAWJ,EAAI4B,IAAMuB,QAAU,IACpDJ,QAAS,SAACX,GAAD,OAVI,SAACA,GAAD,OACnBF,EAAS5B,EAAgB,CAAEC,MAAO6B,EAAGhC,OAAQ,YASvBgD,CAAahB,EAAEU,cAAcO,YAJ/C,SAMGrD,GALIA,SCsBAsD,EA/BS,WACtB,MAAoCvB,mBAAiB,IAArD,mBAAOwB,EAAP,KAAmBC,EAAnB,KACMtB,EAAWb,IASjB,OACE,sBAAKM,UAAWC,IAAM6B,YAAtB,UACE,kCACE,cAAC,IAAD,IACA,uBACEf,KAAK,OACLE,YAAY,SACZjB,UAAWC,IAAMe,MACjBE,SAAU,SAACT,GAAD,OAhBS,SAACA,GAC1BoB,EAAcpB,GACdF,EAAS5B,EAAgB,CAAEC,MAAO6B,EAAGhC,OAAQ,UAerCsD,CAAmBtB,EAAEU,cAAcvC,QAErCA,MAAOgD,IAET,cAAC,IAAD,CAAgBR,QAAS,kBAhB7BS,EAAc,SACdtB,EAAS5B,EAAgB,CAAEC,MAAO,GAAIH,OAAQ,gBAiB5C,cAAC,EAAD,Q,yCCGSuD,EA5BiB,SAAC,GAAoC,IAAlClE,EAAiC,EAAjCA,MAAOQ,EAA0B,EAA1BA,GAAIe,EAAsB,EAAtBA,UAAWL,EAAW,EAAXA,KACjDuB,EAAWb,IACjB,OACE,sBAAKM,UAAWC,IAAM+B,aAAtB,UACE,sBACEhC,UAAWa,IACTxB,GAAaY,IAAMZ,UACnBL,GAAQiB,IAAMjB,KACdiB,IAAMnC,OAERsD,QAAS,kBAAMb,EAAShC,EAAiB,CAAED,KAAIG,OAAQ,WANzD,SAQGX,IAGH,wBACEkC,UAAW,MACXoB,QAAS,kBAAMb,EAAShC,EAAiB,CAAED,KAAIG,OAAQ,gBAFzD,SAIE,cAAC,IAAD,MAEF,wBAAQuB,UAAW,MAAOoB,QAAS,kBAAMb,EAASnC,EAAWE,KAA7D,SACE,cAAC,IAAD,UCZO2D,EAbM,WACnB,IAAMC,EAAWtC,GAAe,SAACjC,GAAD,OAAWA,EAAMZ,UAAUK,cAC3D,OACE,oBAAI4C,UAAWC,IAAMgC,SAArB,SACGC,EAAS1D,KAAI,SAAC6B,GAAD,OACZ,oBAAkBL,UAAWC,IAAMkC,SAAnC,SACE,cAAC,EAAD,eAAkB9B,KADXA,EAAK/B,UCQP8D,EAXC,WACd,OACE,sBAAKpC,UAAWC,IAAMoC,IAAtB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCPOC,IAASC,WACpBC,SAASC,eAAe,SAErBC,OACH,cAAC,IAAD,CAAUnD,MAAOA,EAAjB,SACE,cAAC,EAAD,Q,kBCXJ1C,EAAOC,QAAU,CAAC,aAAe,mCAAmC,UAAY,gCAAgC,MAAQ,4BAA4B,KAAO,8B","file":"static/js/main.944fc9ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ItemAddForm_form__3_BHV\",\"input\":\"ItemAddForm_input__2Xm9S\",\"btn\":\"ItemAddForm_btn__3_3Jf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchPanel\":\"SearchPanel_searchPanel__3hi8J\",\"input\":\"SearchPanel_input__2d8rO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnGroup\":\"ItemStatusFilter_btnGroup__1BTqy\",\"checked\":\"ItemStatusFilter_checked__rVA5h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoList\":\"TodoList_TodoList__3hnL-\",\"listItem\":\"TodoList_listItem__3VSSG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3BT4Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appHeader\":\"Header_appHeader__2vnkS\"};","import { createSlice } from \"@reduxjs/toolkit\";\nimport type { PayloadAction } from \"@reduxjs/toolkit\";\nimport { ITaskSlice } from \"../@types/ITaskSlice\";\nimport { ITask } from \"../@types/ITask\";\n\nconst initialState: ITaskSlice = {\n  taskList: [],\n  searchList: [],\n  term: \"\",\n  filter: \"All\",\n  doneCount: 0,\n  todoCount: 0,\n};\n\nexport const taskSlice = createSlice({\n  name: \"task\",\n  initialState,\n  reducers: {\n    addTask: (state, action: PayloadAction<ITask>) => {\n      action.payload.label.length > 0 &&\n        state.taskList.push({ ...action.payload });\n      taskSlice.caseReducers.countingTasks(state);\n      taskSlice.caseReducers.setSearchList(state);\n    },\n    deleteTask: (state, action: PayloadAction<string>) => {\n      state.taskList = state.taskList.filter((i) => i.id !== action.payload);\n      taskSlice.caseReducers.countingTasks(state);\n      taskSlice.caseReducers.setSearchList(state);\n    },\n    toggleTaskOption: (\n      state,\n      action: PayloadAction<{ id: string; option: \"done\" | \"important\" }>\n    ) => {\n      state.taskList = state.taskList.map((i) => {\n        return i.id === action.payload.id\n          ? { ...i, [action.payload.option]: !i[action.payload.option] }\n          : { ...i };\n      });\n      taskSlice.caseReducers.sortTasks(state);\n      taskSlice.caseReducers.countingTasks(state);\n      taskSlice.caseReducers.setSearchList(state);\n    },\n    setSearchOption: (\n      state,\n      action: PayloadAction<{ value: string; option: \"term\" | \"filter\" }>\n    ) => {\n      state[action.payload.option] = action.payload.value;\n      taskSlice.caseReducers.setSearchList(state);\n    },\n\n    setSearchList: (state) => {\n      state.searchList = state.taskList.filter((i) => {\n        const search =\n          i.label.toLowerCase().indexOf(state.term.toLowerCase()) > -1;\n        const option =\n          state.filter === \"Active\"\n            ? i.done === false\n            : state.filter === \"Done\"\n            ? i.done === true\n            : true;\n        return search && option;\n      });\n    },\n    sortTasks: (state) => {\n      state.taskList = state.taskList.sort(\n        (a, b) => Number(b.important) - Number(a.important)\n      );\n    },\n    countingTasks: (state) => {\n      state.doneCount = state.taskList.filter((i) => i.done).length;\n      state.todoCount = state.taskList.length;\n    },\n  },\n});\n\nexport const { addTask, deleteTask, toggleTaskOption, setSearchOption } =\n  taskSlice.actions;\nexport default taskSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport taskSlice from \"./taskSlice\";\nconst store = configureStore({\n  reducer: {\n    taskSlice,\n  },\n});\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport type { TypedUseSelectorHook } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"../store/store\";\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { FC } from \"react\";\nimport style from \"./Header.module.scss\";\n\nimport { useAppSelector } from \"../../hooks/redux\";\n\nconst Header: FC = () => {\n  const done = useAppSelector((state) => state.taskSlice.doneCount);\n  const toDo = useAppSelector((state) => state.taskSlice.todoCount);\n  return (\n    <div className={style.appHeader}>\n      <h1>My ToDoApp List</h1>\n      <h2>\n        {toDo} more to do, {done} done\n      </h2>\n    </div>\n  );\n};\n\nexport default Header;\n","import { FC, FormEvent, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { AiOutlineClose, AiOutlinePlus } from \"react-icons/ai\";\nimport cn from \"classnames\";\n\nimport style from \"./ItemAddForm.module.scss\";\nimport { useAppDispatch } from \"../../hooks/redux\";\nimport { addTask } from \"../../store/taskSlice\";\n\nconst ItemAddForm: FC = () => {\n  const [task, setTask] = useState<string>(\"\");\n  const dispatch = useAppDispatch();\n  const onAddTask = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    dispatch(\n      addTask({\n        label: task,\n        id: uuidv4(),\n        done: false,\n        important: false,\n      })\n    );\n    setTask(\"\");\n  };\n  const onClear = () => {\n    setTask(\"\");\n  };\n  return (\n    <form onSubmit={(e) => onAddTask(e)} className={cn(style.form)}>\n      <label>\n        <AiOutlinePlus />\n        <input\n          type=\"text\"\n          className={style.input}\n          placeholder={\"New task\"}\n          value={task}\n          onChange={(e) => setTask(e.currentTarget.value)}\n        />\n        <AiOutlineClose onClick={() => onClear()} />\n      </label>\n\n      <button className={cn(style.btn, \"btn\")}>Add</button>\n    </form>\n  );\n};\n\nexport default ItemAddForm;\n","import cn from \"classnames\";\n\nimport style from \"./ItemStatusFilter.module.scss\";\nimport { setSearchOption } from \"../../../store/taskSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../../hooks/redux\";\nimport { FC } from \"react\";\n\nconst ItemStatusFilter: FC = () => {\n  const option = useAppSelector((state) => state.taskSlice.filter);\n  const dispatch = useAppDispatch();\n  const onFilterTask = (e: string) =>\n    dispatch(setSearchOption({ value: e, option: \"filter\" }));\n  const buttons = [\"All\", \"Active\", \"Done\"];\n  return (\n    <div className={style.btnGroup}>\n      {buttons.map((i) => (\n        <button\n          key={i}\n          type=\"button\"\n          className={cn(\"btn\", option === i ? style.checked : \"\")}\n          onClick={(e) => onFilterTask(e.currentTarget.outerText)}\n        >\n          {i}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default ItemStatusFilter;\n","import { ChangeEvent, FC, useState } from \"react\";\nimport { AiOutlineClose, AiOutlineSearch } from \"react-icons/ai\";\n\nimport style from \"./SearchPanel.module.scss\";\nimport { useAppDispatch } from \"../../hooks/redux\";\nimport { setSearchOption } from \"../../store/taskSlice\";\nimport ItemStatusFilter from \"./ItemStatusFilter/ItemStatusFilter\";\n\nconst SearchPanel: FC = () => {\n  const [searchText, setSearchText] = useState<string>(\"\");\n  const dispatch = useAppDispatch();\n  const onChangeSearchText = (e: string) => {\n    setSearchText(e);\n    dispatch(setSearchOption({ value: e, option: \"term\" }));\n  };\n  const onClear = () => {\n    setSearchText(\"\");\n    dispatch(setSearchOption({ value: \"\", option: \"term\" }));\n  };\n  return (\n    <div className={style.searchPanel}>\n      <label>\n        <AiOutlineSearch />\n        <input\n          type=\"text\"\n          placeholder=\"Search\"\n          className={style.input}\n          onChange={(e: ChangeEvent<HTMLInputElement>) =>\n            onChangeSearchText(e.currentTarget.value)\n          }\n          value={searchText}\n        />\n        <AiOutlineClose onClick={() => onClear()} />\n      </label>\n      <ItemStatusFilter />\n    </div>\n  );\n};\n\nexport default SearchPanel;\n","import { FC } from \"react\";\nimport cn from \"classnames\";\nimport { BsExclamationLg, BsTrash } from \"react-icons/bs\";\n\nimport style from \"./TodoListItem.module.scss\";\nimport { ITask } from \"../../../@types/ITask\";\nimport { useAppDispatch } from \"../../../hooks/redux\";\nimport { deleteTask, toggleTaskOption } from \"../../../store/taskSlice\";\n\nconst TodoListItem: FC<ITask> = ({ label, id, important, done }) => {\n  const dispatch = useAppDispatch();\n  return (\n    <div className={style.TodoListItem}>\n      <span\n        className={cn(\n          important && style.important,\n          done && style.done,\n          style.label\n        )}\n        onClick={() => dispatch(toggleTaskOption({ id, option: \"done\" }))}\n      >\n        {label}\n      </span>\n\n      <button\n        className={\"btn\"}\n        onClick={() => dispatch(toggleTaskOption({ id, option: \"important\" }))}\n      >\n        <BsExclamationLg />\n      </button>\n      <button className={\"btn\"} onClick={() => dispatch(deleteTask(id))}>\n        <BsTrash />\n      </button>\n    </div>\n  );\n};\n\nexport default TodoListItem;\n","import { FC } from \"react\";\nimport style from \"./TodoList.module.scss\";\n\nimport { useAppSelector } from \"../../hooks/redux\";\nimport TodoListItem from \"./TodoListItem/TodoListItem\";\n\nconst TodoList: FC = () => {\n  const todoData = useAppSelector((state) => state.taskSlice.searchList);\n  return (\n    <ul className={style.TodoList}>\n      {todoData.map((task) => (\n        <li key={task.id} className={style.listItem}>\n          <TodoListItem {...task} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default TodoList;\n","import { FC } from \"react\";\nimport style from \"./App.module.scss\";\n\nimport Header from \"../Header/Header\";\nimport ItemAddForm from \"../ItemAddForm/ItemAddForm\";\nimport SearchPanel from \"../SearchPanel/SearchPanel\";\nimport TodoList from \"../TodoList/TodoList\";\n\nconst App: FC = () => {\n  return (\n    <div className={style.app}>\n      <Header />\n      <ItemAddForm />\n      <SearchPanel />\n      <TodoList />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom/client\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.scss\";\nimport store from \"./store/store\";\nimport App from \"./components/App/App\";\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoListItem\":\"TodoListItem_TodoListItem__15GUV\",\"important\":\"TodoListItem_important__1Eq5q\",\"label\":\"TodoListItem_label__3aIuS\",\"done\":\"TodoListItem_done__2OQOt\"};"],"sourceRoot":""}